// Code generated by go-swagger; DO NOT EDIT.

package api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "swagger": "2.0",
  "info": {
    "title": "Analyze service API",
    "version": "v2.0.0"
  },
  "basePath": "/api/v1",
  "paths": {
    "/checks": {
      "get": {
        "produces": [
          "application/json"
        ],
        "summary": "Returns list of check results produced by installed plugins",
        "operationId": "getCheckResults",
        "responses": {
          "200": {
            "description": "no error",
            "schema": {
              "description": "existing checks",
              "type": "array",
              "items": {
                "$ref": "#/definitions/checkResult"
              }
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/integration/prometheus": {
      "get": {
        "produces": [
          "application/json"
        ],
        "summary": "returns prometheus instance info and name of cluster",
        "operationId": "getPromethiusIntegrationInfo",
        "responses": {
          "200": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/integrationInfo"
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "patch": {
        "produces": [
          "application/json"
        ],
        "summary": "updates prometheus instance info and name of cluster",
        "operationId": "patchPromethiusIntegrationInfo",
        "responses": {
          "200": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/integrationInfo"
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/integration/prometheus/validations": {
      "get": {
        "produces": [
          "application/json"
        ],
        "summary": "returns list of integration validations",
        "operationId": "getPromethiusIntegrationValidations",
        "responses": {
          "200": {
            "description": "no error",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/integrationComponent"
              }
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "post": {
        "summary": "This will trigger integration validations of all prometheus components",
        "operationId": "triggerValidations",
        "responses": {
          "204": {
            "description": "validation has been triggered"
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/plugins": {
      "get": {
        "produces": [
          "application/json"
        ],
        "summary": "returns list of the registered plugins",
        "operationId": "getPlugins",
        "responses": {
          "200": {
            "description": "no error",
            "schema": {
              "description": "installed plugins",
              "type": "array",
              "items": {
                "$ref": "#/definitions/plugin"
              }
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "summary": "registers plugin",
        "operationId": "registerPlugin",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/plugin"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/plugin"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/plugin"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/plugins/{pluginId}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "summary": "returns registered plugin",
        "operationId": "getPlugin",
        "parameters": [
          {
            "type": "string",
            "description": "The id of the plugin to retrieve",
            "name": "pluginId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/plugin"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "summary": "unregisters plugin",
        "operationId": "unregisterPlugin",
        "parameters": [
          {
            "type": "string",
            "description": "The id of the plugin to retrieve",
            "name": "pluginId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "plugin is removed from registry"
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/plugins/{pluginId}/config": {
      "get": {
        "produces": [
          "application/json"
        ],
        "summary": "returns plugins specific settings object",
        "operationId": "getPluginConfig",
        "parameters": [
          {
            "type": "string",
            "description": "The id of the plugin to retrieve",
            "name": "pluginId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/pluginConfig"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "patch": {
        "produces": [
          "application/json"
        ],
        "summary": "substitutes whole plugin config",
        "operationId": "replacePluginConfig",
        "parameters": [
          {
            "type": "string",
            "description": "The id of the plugin to retrieve",
            "name": "pluginId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pluginConfig"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "plugin is removed from registry"
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "checkResult": {
      "description": "CheckResult represents the single result of Check function invocation of specific plugin.",
      "type": "object",
      "properties": {
        "checkStatus": {
          "description": "shows check status",
          "type": "string",
          "enum": [
            "RED",
            "YELLOW",
            "GREEN"
          ]
        },
        "completedAt": {
          "description": "date/Time of check execution",
          "type": "string",
          "format": "date-time"
        },
        "description": {
          "description": "detailed check result description, it basically contains plugin specific check result info",
          "type": "object"
        },
        "executionStatus": {
          "description": "shows check execution errors",
          "type": "string"
        },
        "id": {
          "description": "unique UUID of Check function invocation of specific plugin",
          "type": "string"
        },
        "name": {
          "description": "check name",
          "type": "string"
        }
      }
    },
    "error": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "integrationComponent": {
      "description": "contains all info related that integration works or not for some component",
      "type": "object",
      "properties": {
        "componentName": {
          "description": "component integration name",
          "type": "string"
        },
        "status": {
          "description": "shows overall validation status for component",
          "type": "string",
          "enum": [
            "OK",
            "IN_PROGRESS",
            "FAILED"
          ]
        },
        "validationTargets": {
          "description": "contains performed validations",
          "type": "array",
          "items": {
            "$ref": "#/definitions/validationTarget"
          }
        },
        "validations": {
          "description": "contains performed validations",
          "type": "array",
          "items": {
            "$ref": "#/definitions/validation"
          }
        }
      }
    },
    "integrationInfo": {
      "description": "IntegrationInfo contains all info needed to reach prometheus instance inside k8s cluster",
      "type": "object",
      "properties": {
        "integrationName": {
          "description": "name of service which is integrated, e. g. Prometheus",
          "type": "string"
        },
        "reachabilityStatus": {
          "description": "shows whether service is reachable",
          "type": "string",
          "enum": [
            "REACHABLE",
            "UNREACHABLE"
          ]
        },
        "serviceName": {
          "description": "name of k8s service which resides in front of app which is integrated",
          "type": "string"
        },
        "serviceNamespace": {
          "description": "name of k8s namespace where app and its service is deployed",
          "type": "string"
        },
        "servicePort": {
          "description": "port of k8s service which resides in front of app which is integrated",
          "type": "string"
        }
      }
    },
    "plugin": {
      "description": "plugin represents the installed recommendation plugin",
      "type": "object",
      "properties": {
        "checkComponentEntryPoint": {
          "description": "path to the bundle to load check plugin ui component",
          "type": "string"
        },
        "description": {
          "description": "detailed plugin description",
          "type": "string"
        },
        "id": {
          "description": "unique ID of installed plugin\nbasically it is slugged URI of plugin repository name e. g. supergiant-request-limits-check\n",
          "type": "string"
        },
        "installedAt": {
          "description": "date/Time the plugin was installed",
          "type": "string",
          "format": "date-time"
        },
        "name": {
          "description": "name is the name of the plugin.",
          "type": "string"
        },
        "serviceEndpoint": {
          "description": "name and port of k8s service which is front of plugin deployment",
          "type": "string"
        },
        "serviceLabels": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "settingsComponentEntryPoint": {
          "description": "path to the bundle to load settings plugin ui component",
          "type": "string"
        },
        "status": {
          "description": "plugin status",
          "type": "string"
        },
        "version": {
          "description": "plugin version, major version shall be equal to robots version",
          "type": "string"
        }
      }
    },
    "pluginConfig": {
      "description": "pluginConfig represents plugin configuration",
      "type": "object",
      "properties": {
        "etcdEndpoints": {
          "description": "list of etcd endpoints which plugin can use to store data",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "executionInterval": {
          "description": "plugin check function invocation interval in seconds",
          "type": "integer"
        },
        "pluginSpecificConfig": {
          "description": "object with plugin specific settings properties",
          "type": "object"
        }
      }
    },
    "validation": {
      "description": "single integration validation for component",
      "type": "object",
      "properties": {
        "name": {
          "description": "name of validation, e. g. node_exporter deamonSet is OK",
          "type": "string"
        },
        "status": {
          "description": "shows validation status",
          "type": "string",
          "enum": [
            "OK",
            "FAILED"
          ]
        }
      }
    },
    "validationTarget": {
      "description": "validation target is specific node pr service or something else where we check that some integration is configured",
      "type": "object",
      "properties": {
        "name": {
          "description": "name of validation target, it can be hostname or service name, or container name",
          "type": "string"
        },
        "status": {
          "description": "shows validation status",
          "type": "string",
          "enum": [
            "OK",
            "FAILED"
          ]
        }
      }
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "swagger": "2.0",
  "info": {
    "title": "Analyze service API",
    "version": "v2.0.0"
  },
  "basePath": "/api/v1",
  "paths": {
    "/checks": {
      "get": {
        "produces": [
          "application/json"
        ],
        "summary": "Returns list of check results produced by installed plugins",
        "operationId": "getCheckResults",
        "responses": {
          "200": {
            "description": "no error",
            "schema": {
              "description": "existing checks",
              "type": "array",
              "items": {
                "$ref": "#/definitions/checkResult"
              }
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/integration/prometheus": {
      "get": {
        "produces": [
          "application/json"
        ],
        "summary": "returns prometheus instance info and name of cluster",
        "operationId": "getPromethiusIntegrationInfo",
        "responses": {
          "200": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/integrationInfo"
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "patch": {
        "produces": [
          "application/json"
        ],
        "summary": "updates prometheus instance info and name of cluster",
        "operationId": "patchPromethiusIntegrationInfo",
        "responses": {
          "200": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/integrationInfo"
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/integration/prometheus/validations": {
      "get": {
        "produces": [
          "application/json"
        ],
        "summary": "returns list of integration validations",
        "operationId": "getPromethiusIntegrationValidations",
        "responses": {
          "200": {
            "description": "no error",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/integrationComponent"
              }
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "post": {
        "summary": "This will trigger integration validations of all prometheus components",
        "operationId": "triggerValidations",
        "responses": {
          "204": {
            "description": "validation has been triggered"
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/plugins": {
      "get": {
        "produces": [
          "application/json"
        ],
        "summary": "returns list of the registered plugins",
        "operationId": "getPlugins",
        "responses": {
          "200": {
            "description": "no error",
            "schema": {
              "description": "installed plugins",
              "type": "array",
              "items": {
                "$ref": "#/definitions/plugin"
              }
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "summary": "registers plugin",
        "operationId": "registerPlugin",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/plugin"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/plugin"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/plugin"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/plugins/{pluginId}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "summary": "returns registered plugin",
        "operationId": "getPlugin",
        "parameters": [
          {
            "type": "string",
            "description": "The id of the plugin to retrieve",
            "name": "pluginId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/plugin"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "summary": "unregisters plugin",
        "operationId": "unregisterPlugin",
        "parameters": [
          {
            "type": "string",
            "description": "The id of the plugin to retrieve",
            "name": "pluginId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "plugin is removed from registry"
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/plugins/{pluginId}/config": {
      "get": {
        "produces": [
          "application/json"
        ],
        "summary": "returns plugins specific settings object",
        "operationId": "getPluginConfig",
        "parameters": [
          {
            "type": "string",
            "description": "The id of the plugin to retrieve",
            "name": "pluginId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "no error",
            "schema": {
              "$ref": "#/definitions/pluginConfig"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "patch": {
        "produces": [
          "application/json"
        ],
        "summary": "substitutes whole plugin config",
        "operationId": "replacePluginConfig",
        "parameters": [
          {
            "type": "string",
            "description": "The id of the plugin to retrieve",
            "name": "pluginId",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pluginConfig"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "plugin is removed from registry"
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "checkResult": {
      "description": "CheckResult represents the single result of Check function invocation of specific plugin.",
      "type": "object",
      "properties": {
        "checkStatus": {
          "description": "shows check status",
          "type": "string",
          "enum": [
            "RED",
            "YELLOW",
            "GREEN"
          ]
        },
        "completedAt": {
          "description": "date/Time of check execution",
          "type": "string",
          "format": "date-time"
        },
        "description": {
          "description": "detailed check result description, it basically contains plugin specific check result info",
          "type": "object"
        },
        "executionStatus": {
          "description": "shows check execution errors",
          "type": "string"
        },
        "id": {
          "description": "unique UUID of Check function invocation of specific plugin",
          "type": "string"
        },
        "name": {
          "description": "check name",
          "type": "string"
        }
      }
    },
    "error": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "integrationComponent": {
      "description": "contains all info related that integration works or not for some component",
      "type": "object",
      "properties": {
        "componentName": {
          "description": "component integration name",
          "type": "string"
        },
        "status": {
          "description": "shows overall validation status for component",
          "type": "string",
          "enum": [
            "OK",
            "IN_PROGRESS",
            "FAILED"
          ]
        },
        "validationTargets": {
          "description": "contains performed validations",
          "type": "array",
          "items": {
            "$ref": "#/definitions/validationTarget"
          }
        },
        "validations": {
          "description": "contains performed validations",
          "type": "array",
          "items": {
            "$ref": "#/definitions/validation"
          }
        }
      }
    },
    "integrationInfo": {
      "description": "IntegrationInfo contains all info needed to reach prometheus instance inside k8s cluster",
      "type": "object",
      "properties": {
        "integrationName": {
          "description": "name of service which is integrated, e. g. Prometheus",
          "type": "string"
        },
        "reachabilityStatus": {
          "description": "shows whether service is reachable",
          "type": "string",
          "enum": [
            "REACHABLE",
            "UNREACHABLE"
          ]
        },
        "serviceName": {
          "description": "name of k8s service which resides in front of app which is integrated",
          "type": "string"
        },
        "serviceNamespace": {
          "description": "name of k8s namespace where app and its service is deployed",
          "type": "string"
        },
        "servicePort": {
          "description": "port of k8s service which resides in front of app which is integrated",
          "type": "string"
        }
      }
    },
    "plugin": {
      "description": "plugin represents the installed recommendation plugin",
      "type": "object",
      "properties": {
        "checkComponentEntryPoint": {
          "description": "path to the bundle to load check plugin ui component",
          "type": "string"
        },
        "description": {
          "description": "detailed plugin description",
          "type": "string"
        },
        "id": {
          "description": "unique ID of installed plugin\nbasically it is slugged URI of plugin repository name e. g. supergiant-request-limits-check\n",
          "type": "string"
        },
        "installedAt": {
          "description": "date/Time the plugin was installed",
          "type": "string",
          "format": "date-time"
        },
        "name": {
          "description": "name is the name of the plugin.",
          "type": "string"
        },
        "serviceEndpoint": {
          "description": "name and port of k8s service which is front of plugin deployment",
          "type": "string"
        },
        "serviceLabels": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "settingsComponentEntryPoint": {
          "description": "path to the bundle to load settings plugin ui component",
          "type": "string"
        },
        "status": {
          "description": "plugin status",
          "type": "string"
        },
        "version": {
          "description": "plugin version, major version shall be equal to robots version",
          "type": "string"
        }
      }
    },
    "pluginConfig": {
      "description": "pluginConfig represents plugin configuration",
      "type": "object",
      "properties": {
        "etcdEndpoints": {
          "description": "list of etcd endpoints which plugin can use to store data",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "executionInterval": {
          "description": "plugin check function invocation interval in seconds",
          "type": "integer"
        },
        "pluginSpecificConfig": {
          "description": "object with plugin specific settings properties",
          "type": "object"
        }
      }
    },
    "validation": {
      "description": "single integration validation for component",
      "type": "object",
      "properties": {
        "name": {
          "description": "name of validation, e. g. node_exporter deamonSet is OK",
          "type": "string"
        },
        "status": {
          "description": "shows validation status",
          "type": "string",
          "enum": [
            "OK",
            "FAILED"
          ]
        }
      }
    },
    "validationTarget": {
      "description": "validation target is specific node pr service or something else where we check that some integration is configured",
      "type": "object",
      "properties": {
        "name": {
          "description": "name of validation target, it can be hostname or service name, or container name",
          "type": "string"
        },
        "status": {
          "description": "shows validation status",
          "type": "string",
          "enum": [
            "OK",
            "FAILED"
          ]
        }
      }
    }
  }
}`))
}
