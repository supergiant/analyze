// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetPluginsHandlerFunc turns a function with the right signature into a get plugins handler
type GetPluginsHandlerFunc func(GetPluginsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetPluginsHandlerFunc) Handle(params GetPluginsParams) middleware.Responder {
	return fn(params)
}

// GetPluginsHandler interface for that can handle valid get plugins params
type GetPluginsHandler interface {
	Handle(GetPluginsParams) middleware.Responder
}

// NewGetPlugins creates a new http.Handler for the get plugins operation
func NewGetPlugins(ctx *middleware.Context, handler GetPluginsHandler) *GetPlugins {
	return &GetPlugins{Context: ctx, Handler: handler}
}

/*GetPlugins swagger:route GET /plugin getPlugins

Returns list of the installed recommendation plugins

*/
type GetPlugins struct {
	Context *middleware.Context
	Handler GetPluginsHandler
}

func (o *GetPlugins) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetPluginsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
